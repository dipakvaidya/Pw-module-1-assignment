{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP8/08PaCWBdQoqJUuILY2F"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1) What is Python, and why is it popular?\n","        \n","* python is a programing language that is easy to understand and write, making it a popular to write among developers and programers"],"metadata":{"id":"RDxUB6VSc7S8"}},{"cell_type":"markdown","source":[],"metadata":{"id":"kUTtGjZadAUq"}},{"cell_type":"markdown","source":["2) What is an interpreter in Python?\n","\n"," * A Python interpreter is a computer program that takes the Python code and converts it into machine code.\n"," We also have compilers that translate high-level code into machine code before execution but an interpreter is different.\n"," It translates the code you write into instructions that the computer can understand, executing them line by line."],"metadata":{"id":"q_1Z4Fghd3HK"}},{"cell_type":"markdown","source":[" Can keywords be used as variable name"],"metadata":{"id":"RdWXaZOrVNoS"}},{"cell_type":"markdown","source":[" 3) What are pre-defined keywords in Python?\n","\n"," * Keywords are reserved words in Python that have special meanings and cannot be used as identifiers (variable names, function names, etc.).\n","Examples of keywords include if, else, while, for, def, class, import, try, except, return, True, False, None, etc.\n","Keywords are case-sensitive and cannot be redefined or overridden within a Python program."],"metadata":{"id":"C6dzDDOIeFEp"}},{"cell_type":"markdown","source":["4. Can keywords be used as variable names?\n","- no, keyworld in python cannot be used as variable names because they are reserved words with special meanaings in the language's suntax. using a keyword as a variable names would lead to a suntax error, as the interpeter wouldn't be able to distinguish between the intended to distinguish between the intended variable and the keyword's funtion.\n"],"metadata":{"id":"D59k-U_05hdk"}},{"cell_type":"markdown","source":["5. What is mutability in Python?\n","* mubtale object can be modified after their creation lists, dictonares,remove and change"],"metadata":{"id":"BI-1_-C85hZO"}},{"cell_type":"markdown","source":[" 6. Why are lists mutable, but tuples are immutable?\n"," * list mutable\n"," you can change a list after its creation. you can add, remove or modify elements.\n"," *tuples:\n"," Immutable once a type is created it cannot add, remove, or modify elements within a tuple (cannot be modified)"],"metadata":{"id":"Pz8Xk9pc5hVY"}},{"cell_type":"markdown","source":[" 7. What is the difference between “==” and “is” operators in Python?\n"," * == compares values (checks if two objects have the same value).\n"," *is compares identity (checks if two variables point to the same object in memory).\n","* ex:\n"," x = [1, 2, 3]\n"," y = [1, 2, 3]\n"," print(x === y) # true (same values)\n"," print(x is y) # false (different objects)\n"],"metadata":{"id":"EHqYQ4Fq5hSD"}},{"cell_type":"markdown","source":["8. What are logical operators in Python?\n","- logical operator in python are used to perform logical operation values or variables.\n","* ex: and, or, not\n","* and: operater return true if both operands are ture\n","*or: opereator returns ture if at least once of the oeprands true.\n","\n"],"metadata":{"id":"mk9mFCkH5hO6"}},{"cell_type":"markdown","source":[" 9. What is type casting in Python?\n"," Type casting also referred to as type conversion is the process of changing one data type to another in python.\n"," python provides built-in functions for type asting such as int(), float(), list(), tupel(), dict()\n"," type casting is often necessary for performing arithmetic operation, data maniputation, and input/output operations in python programs."],"metadata":{"id":"_nZMp5Er5hKi"}},{"cell_type":"markdown","source":[" 10. What is the difference between implicit and explicit type casting?\n"," two type are type casting implicit and explicit.\n"," *emplicit type casting:\n"," automatic done by python without any explicit instruction from the programmer ensures smooth operations between different types without raising errors.\n"," explicit type casting:\n"," performed by the programmer using built-in functions to convert data types. provides the programmer with complete control over the type conversion provess."],"metadata":{"id":"b691uWW-5hHB"}},{"cell_type":"markdown","source":["11. What is the purpose of conditional statements in Python?\n","Conditional statements in Python are used to make decisions in code execution based on certain conditions. They allow the program to execute specific blocks of code only when particular conditions are met. This helps in controlling the flow of execution and making the program dynamic and responsive.\n","* python supports conditional statement such as if, elif(else if), and else to control the flow of execution conditionls can be nested to handle different branch of exection.\n"],"metadata":{"id":"kskGFHGE5hDp"}},{"cell_type":"markdown","source":["12. How does the elif statement work?\n","The elif (short for \"else if\") statement in python is used to check multiple condition.\n","* if condition:\n","the program first checks the condition in the if statement is executed and the rest of the elif or else blockd are skipped.\n","*elif condition:\n","if the if condition is the program checks the condition in each elif if the elif condition that evaluates to ture will execute its corresponding code, block and else blocks are skipped.\n"],"metadata":{"id":"Ks8qGW4o5hAD"}},{"cell_type":"markdown","source":["What is the difference between for and while loops?\n","*for loops:\n","used when you knew advance or when iterating over a sequence (like a list, tuple, string, range)\n","*while loop:\n","used when the number of iterations is not known in advance and depends on a condition. while condtion code block to execute"],"metadata":{"id":"alBoBLeA5g7T"}},{"cell_type":"markdown","source":["14. Describe a scenario where a while loop is more suitable than a for loop.\n","A while loop is more suitable than a for loop when the number of iterations is unknown or depends on a condition being met rather than a fixed range.\n","\n","Scenario:\n","Imagine you are building an authentication system where a user has to enter the correct password to log in. You want to give the user unlimited attempts until they enter the correct password.\n"],"metadata":{"id":"RtOmewRZ5g38"}},{"cell_type":"markdown","source":[],"metadata":{"id":"8rsM_5YM5gz5"}},{"cell_type":"markdown","source":[],"metadata":{"id":"Iepxfrwh5gvo"}},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"Npy9CfGIA0_U","executionInfo":{"status":"ok","timestamp":1738941941114,"user_tz":-330,"elapsed":8,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"e7d0d091-9aac-457f-ffba-9aa9c04f8943"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Hello World!'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":[" 2) Write a Python program that displays your name and age."],"metadata":{"id":"N3UCFJmXBP2l"}},{"cell_type":"code","source":["Name = input(\"enter your name \")\n","Age = input(\"enter your age \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z4VH-iPR-30E","executionInfo":{"status":"ok","timestamp":1738941807137,"user_tz":-330,"elapsed":70147,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"c2ad783b-d8ef-469a-d2c2-b93a1aad7fb0"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["enter your name Dipak Vaidya\n","enter your age 25\n"]}]},{"cell_type":"markdown","source":["3) Write code to print all the pre-defined keywords in Python using the keyword library"],"metadata":{"id":"cKuLIKrzBcH3"}},{"cell_type":"code","source":["import keyword\n","print(keyword.kwlist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i7gG143wBvMJ","executionInfo":{"status":"ok","timestamp":1738942273746,"user_tz":-330,"elapsed":24,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"1695c645-aa8e-4edd-ca7b-7772f9424e6a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n"]}]},{"cell_type":"markdown","source":["4) Write a program that checks if a given word is a Python keyword"],"metadata":{"id":"yevJrTZ-CgLF"}},{"cell_type":"code","source":["import keyword\n","\n","def is_keyword(word):\n","   return keyword.iskeyword(word)\n","\n","word_to_check = input(\"Enter a word: \")\n","\n","if is_keyword(word_to_check):\n","  print(f\"'{word_to_check}' is a Python keyword.\")\n","else:\n","  print(f\"'{word_to_check}' is not a Python keyword.\")\n"],"metadata":{"id":"UQB6-xZDCmY_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["4) Create a list and tuple in Python, and demonstrate how attempting to change an element works differently for each"],"metadata":{"id":"olyf-eyBDVLG"}},{"cell_type":"code","source":["my_list = [1, 3, \"dipak\", \"apple\", \"cricket\", \"orange\"]\n","my_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lz9lO68yC-Xd","executionInfo":{"status":"ok","timestamp":1738943170817,"user_tz":-330,"elapsed":9,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"e0db3d1e-06e3-4d54-d08c-720d025332f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 3, 'dipak', 'apple', 'cricket', 'orange']"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["my_list[3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"b4H8_02ZEiBE","executionInfo":{"status":"ok","timestamp":1738943219470,"user_tz":-330,"elapsed":17,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"b69375a6-a3b5-45ff-a271-d4b5624de898"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'apple'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["my_list[3] = \"mango\"\n","my_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7XJMhWc4F-u-","executionInfo":{"status":"ok","timestamp":1738943313264,"user_tz":-330,"elapsed":15,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"5e4fb977-22a0-46a6-9666-ff2dcd48817b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 3, 'dipak', 'mango', 'cricket', 'orange']"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["my_tuple = (1, 3, \"dipak\", \"apple\", \"cricket\", \"orange\")\n","\n","my_tuple[3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1738943085547,"user_tz":-330,"elapsed":24,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"9f33a0ca-cc7d-4d76-903f-70452cb89187","id":"N9TPp_cQFfdu"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'apple'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["my_tuple[3] = \"mango\"\n","my_tuple"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":159},"id":"kpF-Eh23GYGg","executionInfo":{"status":"error","timestamp":1738943384023,"user_tz":-330,"elapsed":15,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"a3a485c9-0b9c-4669-8247-badd39730c24"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-4607d95ce4e4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmy_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"mango\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmy_tuple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}]},{"cell_type":"markdown","source":["6) Write a function to demonstrate the behavior of mutable and immutable arguments"],"metadata":{"id":"3HYzO3GcGy8_"}},{"cell_type":"code","source":["my_list = (1, 2, 2.3, \"karan\" \"dhanshri\", \"glasses\", 3+5j, \"purple\")\n","my_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k11WX26DGh58","executionInfo":{"status":"ok","timestamp":1738944178177,"user_tz":-330,"elapsed":35,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"94595af2-e14a-445d-d05b-9eb2d965928f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 2.3, 'karandhanshri', 'glasses', (3+5j), 'purple')"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["my_list[5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wOvO4SBVJktC","executionInfo":{"status":"ok","timestamp":1738944203750,"user_tz":-330,"elapsed":10,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"c0682179-5492-4ab8-cf54-3eb81e433fc2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3+5j)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["my_list[5] = \"dipak\" # it is immutable"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"Z9YpUZgdJsnF","executionInfo":{"status":"error","timestamp":1738944283827,"user_tz":-330,"elapsed":9,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"021bff65-946a-41e0-89d1-e40189c77df5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-a1d61f0b6aa9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmy_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"dipak\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}]},{"cell_type":"markdown","source":["7) Write a program to demonstrate the use of logical operators"],"metadata":{"id":"oyQz1qBNKMBm"}},{"cell_type":"code","source":["a = 7\n","if ((a < 9)and(a % 2 == 0)):\n","  print(\"expression is correct\")\n","else:\n","  print(\"expression is not correct\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H1Ux5noZJwKn","executionInfo":{"status":"ok","timestamp":1738944703380,"user_tz":-330,"elapsed":31,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"55e42627-9220-48b9-a654-7570bbdfa5ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["expression is not correct\n"]}]},{"cell_type":"markdown","source":["8) Write a Python program to convert user input from string to integer, float, and boolean types\n"],"metadata":{"id":"pNhEHCoqL4_z"}},{"cell_type":"code","source":["user_input = input(\"Enter a number: \")\n","user_input"],"metadata":{"id":"3lf2I9qrNWY7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["intiger_value = int(user_input)\n","intiger_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IhntSId0Oj45","executionInfo":{"status":"ok","timestamp":1738945858775,"user_tz":-330,"elapsed":110,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"b03acb0a-695a-487e-8ced-114a5f166c0d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["float_value = float(user_input)\n","float_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ZxmjQokQApl","executionInfo":{"status":"ok","timestamp":1738945913054,"user_tz":-330,"elapsed":10,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"714c9094-ab88-4ad6-a477-5a4b515d9828"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45.0"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["boolean_value = bool(user_input)\n","boolean_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"87JF3sheQN6p","executionInfo":{"status":"ok","timestamp":1738945979398,"user_tz":-330,"elapsed":20,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"7a9fd281-c588-4b77-db71-16a0404cbeb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["str_value = str(user_input)\n","str_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"krkSCNR5QbIY","executionInfo":{"status":"ok","timestamp":1738946025719,"user_tz":-330,"elapsed":26,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"c31d2789-2abc-4c24-d25f-ad1e8b368ece"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'45'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["10) Write code to demonstrate type casting with list elements\n"],"metadata":{"id":"CBhYjuo42cGg"}},{"cell_type":"code","source":["str_list = [\"10\", \"20\", \"30\", \"40\"]\n","float_list = [10.5, 20.7, 30.9, 40.3]\n","int_list = [1, 2, 3, 4 ]\n","list_converted = list(map(int, str_list))\n","print(\"string to Integer:\", list_converted) # Changed str_converted to list_converted"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ckACKbL84GBX","executionInfo":{"status":"ok","timestamp":1739526801052,"user_tz":-330,"elapsed":580,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"c7026052-7f9d-4bbb-aa9e-1813fbd96f8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["string to Integer: [10, 20, 30, 40]\n"]}]},{"cell_type":"markdown","source":["11) Write a program that checks if a number is positive, negative, or zero."],"metadata":{"id":"_kHA17G7XjnX"}},{"cell_type":"code","source":["a = 4\n","if a >  5:\n","  print(\"number is positive\")\n","elif a < - 7:\n","  print(\"number is negative\")\n","else:\n","  print(\"number is zero\")"],"metadata":{"id":"zL-Wl1O4QpaW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739527279619,"user_tz":-330,"elapsed":1342,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"92bf539c-1de0-4fb9-860c-c281ce432d81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["number is zero\n"]}]},{"cell_type":"markdown","source":["12)  Write a for loop to print numbers from 1 to 10"],"metadata":{"id":"urGnUX9P6Fo3"}},{"cell_type":"code","source":["for i in range(1, 11):\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oKz8fjMI5g3i","executionInfo":{"status":"ok","timestamp":1739527479764,"user_tz":-330,"elapsed":570,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"d3eaa73b-7084-4d69-907c-cebc19ecec95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n"]}]},{"cell_type":"markdown","source":["13) write a python program to find the sum of all even numbers between 1 and 50."],"metadata":{"id":"n8aGUVho7JIm"}},{"cell_type":"code","source":["sum_of_even = 0\n","for number in range (1, 51):\n","  if number % 2 == 0:\n","    sum_of_even += number"],"metadata":{"id":"ZGxfC9Vj6kR0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_of_even"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_yguG5EMQ91E","executionInfo":{"status":"ok","timestamp":1739768300668,"user_tz":-330,"elapsed":8,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"884f8d8b-68bb-48bb-9529-29f2c6afe78d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["650"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["14) Write a program to reverse a string using a while loop"],"metadata":{"id":"jh9k7bLLRwzO"}},{"cell_type":"code","source":["def reverse_string(text):\n","    reversed_string = \"\"\n","    index = len(text) - 1\n","    while index >= 0:\n","        reversed_string += text[index]\n","string_to_reverse = input(\"Enter a string: \")\n","reversed_string = reverse_string(string_to_reverse)\n","print(\"Reversed string:\", reversed_string)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vgSUk2PcV8al","outputId":"5d177c70-fa05-404d-ef33-0780ecae7c50"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a string: (\"zu\", 1, 3, \n"]}]},{"cell_type":"markdown","source":[" 15) Write a Python program to calculate the factorial of a number provided by the user using a while loop."],"metadata":{"id":"lNSj5MEZR8sk"}},{"cell_type":"code","source":["def factorial(number):\n","    if number < 0:\n","        return \"Factorial is not defined for negative numbers.\"\n","    elif number == 0:\n","        return 1\n","    else:\n","        factorial = 1\n","        while number > 1:\n","            factorial *= number\n","            number -= 1\n","        return factorial\n","\n","num = int(input(\"Enter a non-negative integer: \"))\n","result = factorial(num)\n","print(\"The factorial of\", num, \"is\", result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYvOUStzTbv6","executionInfo":{"status":"ok","timestamp":1739768920050,"user_tz":-330,"elapsed":15464,"user":{"displayName":"Dipak Vaidya","userId":"06047705225586040037"}},"outputId":"bc0c035a-67ec-46f2-8b64-f0cfcb4c0acc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a non-negative integer: 5\n","The factorial of 5 is 120\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_z1dfITgTriB"},"execution_count":null,"outputs":[]}]}